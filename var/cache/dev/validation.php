<?php

// This file has been auto-generated by the Symfony Cache Component.

return [[

'Symfony.Component.Form.Form' => 0,
'IteratorAggregate' => 1,
'Traversable' => 2,
'Symfony.Component.Form.FormInterface' => 3,
'ArrayAccess' => 4,
'Countable' => 5,
'Symfony.Component.Form.ClearableErrorsInterface' => 6,
'App.Entity.Patient' => 7,
'App.Entity.Consultant' => 8,
'App.Entity.Nurse' => 9,
'App.Entity.Doctor' => 10,
'App.Entity.Technician' => 11,

], [

0 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            (($f = &\Symfony\Component\VarExporter\Internal\Registry::$factories)['Symfony\\Component\\Validator\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::f('Symfony\\Component\\Validator\\Mapping\\ClassMetadata'))(),
            ($f['Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::f('Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'))(),
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Symfony\\Component\\Form\\Extension\\Validator\\Constraints\\Form'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Form\\Extension\\Validator\\Constraints\\Form')),
        ],
        null,
        [
            'stdClass' => [
                'name' => [
                    'Symfony\\Component\\Form\\Form',
                    'children',
                ],
                'defaultGroup' => [
                    'Form',
                ],
                'members' => [
                    [
                        'children' => [
                            $o[1],
                        ],
                    ],
                ],
                'properties' => [
                    [
                        'children' => $o[1],
                    ],
                ],
                'constraints' => [
                    [
                        $o[2],
                    ],
                ],
                'constraintsByGroup' => [
                    [
                        'Default' => [
                            $o[2],
                        ],
                        'Form' => [
                            $o[2],
                        ],
                    ],
                ],
                'class' => [
                    1 => 'Symfony\\Component\\Form\\Form',
                ],
                'property' => [
                    1 => 'children',
                ],
                'cascadingStrategy' => [
                    1 => 2,
                ],
                'traversalStrategy' => [
                    1 => 1,
                ],
                'groups' => [
                    2 => [
                        'Default',
                        'Form',
                    ],
                ],
            ],
        ],
        $o[0],
        []
    );
},
1 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            (\Symfony\Component\VarExporter\Internal\Registry::$factories['Symfony\\Component\\Validator\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::f('Symfony\\Component\\Validator\\Mapping\\ClassMetadata'))(),
        ],
        null,
        [
            'stdClass' => [
                'name' => [
                    'IteratorAggregate',
                ],
                'defaultGroup' => [
                    'IteratorAggregate',
                ],
            ],
        ],
        $o[0],
        []
    );
},
2 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            (\Symfony\Component\VarExporter\Internal\Registry::$factories['Symfony\\Component\\Validator\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::f('Symfony\\Component\\Validator\\Mapping\\ClassMetadata'))(),
        ],
        null,
        [
            'stdClass' => [
                'name' => [
                    'Traversable',
                ],
                'defaultGroup' => [
                    'Traversable',
                ],
            ],
        ],
        $o[0],
        []
    );
},
3 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            (\Symfony\Component\VarExporter\Internal\Registry::$factories['Symfony\\Component\\Validator\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::f('Symfony\\Component\\Validator\\Mapping\\ClassMetadata'))(),
        ],
        null,
        [
            'stdClass' => [
                'name' => [
                    'Symfony\\Component\\Form\\FormInterface',
                ],
                'defaultGroup' => [
                    'FormInterface',
                ],
            ],
        ],
        $o[0],
        []
    );
},
4 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            (\Symfony\Component\VarExporter\Internal\Registry::$factories['Symfony\\Component\\Validator\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::f('Symfony\\Component\\Validator\\Mapping\\ClassMetadata'))(),
        ],
        null,
        [
            'stdClass' => [
                'name' => [
                    'ArrayAccess',
                ],
                'defaultGroup' => [
                    'ArrayAccess',
                ],
            ],
        ],
        $o[0],
        []
    );
},
5 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            (\Symfony\Component\VarExporter\Internal\Registry::$factories['Symfony\\Component\\Validator\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::f('Symfony\\Component\\Validator\\Mapping\\ClassMetadata'))(),
        ],
        null,
        [
            'stdClass' => [
                'name' => [
                    'Countable',
                ],
                'defaultGroup' => [
                    'Countable',
                ],
            ],
        ],
        $o[0],
        []
    );
},
6 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            (\Symfony\Component\VarExporter\Internal\Registry::$factories['Symfony\\Component\\Validator\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::f('Symfony\\Component\\Validator\\Mapping\\ClassMetadata'))(),
        ],
        null,
        [
            'stdClass' => [
                'name' => [
                    'Symfony\\Component\\Form\\ClearableErrorsInterface',
                ],
                'defaultGroup' => [
                    'ClearableErrorsInterface',
                ],
            ],
        ],
        $o[0],
        []
    );
},
7 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            (($f = &\Symfony\Component\VarExporter\Internal\Registry::$factories)['Symfony\\Component\\Validator\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::f('Symfony\\Component\\Validator\\Mapping\\ClassMetadata'))(),
            ($f['Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::f('Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'))(),
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['App\\Validator\\Constraints\\ContainsAlphanumeric'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('App\\Validator\\Constraints\\ContainsAlphanumeric')),
            clone ($p['Symfony\\Component\\Validator\\Constraints\\NotBlank'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Validator\\Constraints\\NotBlank')),
            clone ($p['Symfony\\Component\\Validator\\Constraints\\Length'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Validator\\Constraints\\Length')),
            $f['Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'](),
            clone ($p['App\\Validator\\Constraints\\ContainsNumberic'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('App\\Validator\\Constraints\\ContainsNumberic')),
            clone $p['Symfony\\Component\\Validator\\Constraints\\NotBlank'],
            $f['Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'](),
            clone $p['App\\Validator\\Constraints\\ContainsNumberic'],
            clone $p['Symfony\\Component\\Validator\\Constraints\\NotBlank'],
            $f['Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'](),
            clone ($p['App\\Validator\\Constraints\\ContainsAlphabetic'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('App\\Validator\\Constraints\\ContainsAlphabetic')),
            clone $p['Symfony\\Component\\Validator\\Constraints\\NotBlank'],
            $f['Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'](),
            clone $p['App\\Validator\\Constraints\\ContainsAlphabetic'],
            clone $p['Symfony\\Component\\Validator\\Constraints\\NotBlank'],
        ],
        null,
        [
            'stdClass' => [
                'name' => [
                    'App\\Entity\\Patient',
                    'pNIC',
                    5 => 'pPhoneNumber',
                    8 => 'pEmergencyContactDetails',
                    11 => 'pFirstName',
                    14 => 'pLastName',
                ],
                'defaultGroup' => [
                    'Patient',
                ],
                'members' => [
                    [
                        'pNIC' => [
                            $o[1],
                        ],
                        'pPhoneNumber' => [
                            $o[5],
                        ],
                        'pEmergencyContactDetails' => [
                            $o[8],
                        ],
                        'pFirstName' => [
                            $o[11],
                        ],
                        'pLastName' => [
                            $o[14],
                        ],
                    ],
                ],
                'properties' => [
                    [
                        'pNIC' => $o[1],
                        'pPhoneNumber' => $o[5],
                        'pEmergencyContactDetails' => $o[8],
                        'pFirstName' => $o[11],
                        'pLastName' => $o[14],
                    ],
                ],
                'class' => [
                    1 => 'App\\Entity\\Patient',
                    5 => 'App\\Entity\\Patient',
                    8 => 'App\\Entity\\Patient',
                    11 => 'App\\Entity\\Patient',
                    14 => 'App\\Entity\\Patient',
                ],
                'property' => [
                    1 => 'pNIC',
                    5 => 'pPhoneNumber',
                    8 => 'pEmergencyContactDetails',
                    11 => 'pFirstName',
                    14 => 'pLastName',
                ],
                'constraints' => [
                    1 => [
                        $o[2],
                        $o[3],
                        $o[4],
                    ],
                    5 => [
                        $o[6],
                        $o[7],
                    ],
                    8 => [
                        $o[9],
                        $o[10],
                    ],
                    11 => [
                        $o[12],
                        $o[13],
                    ],
                    14 => [
                        $o[15],
                        $o[16],
                    ],
                ],
                'constraintsByGroup' => [
                    1 => [
                        'Default' => [
                            $o[2],
                            $o[3],
                            $o[4],
                        ],
                        'Patient' => [
                            $o[2],
                            $o[3],
                            $o[4],
                        ],
                    ],
                    5 => [
                        'Default' => [
                            $o[6],
                            $o[7],
                        ],
                        'Patient' => [
                            $o[6],
                            $o[7],
                        ],
                    ],
                    8 => [
                        'Default' => [
                            $o[9],
                            $o[10],
                        ],
                        'Patient' => [
                            $o[9],
                            $o[10],
                        ],
                    ],
                    11 => [
                        'Default' => [
                            $o[12],
                            $o[13],
                        ],
                        'Patient' => [
                            $o[12],
                            $o[13],
                        ],
                    ],
                    14 => [
                        'Default' => [
                            $o[15],
                            $o[16],
                        ],
                        'Patient' => [
                            $o[15],
                            $o[16],
                        ],
                    ],
                ],
                'groups' => [
                    2 => [
                        'Default',
                        'Patient',
                    ],
                    [
                        'Default',
                        'Patient',
                    ],
                    [
                        'Default',
                        'Patient',
                    ],
                    6 => [
                        'Default',
                        'Patient',
                    ],
                    [
                        'Default',
                        'Patient',
                    ],
                    9 => [
                        'Default',
                        'Patient',
                    ],
                    [
                        'Default',
                        'Patient',
                    ],
                    12 => [
                        'Default',
                        'Patient',
                    ],
                    [
                        'Default',
                        'Patient',
                    ],
                    15 => [
                        'Default',
                        'Patient',
                    ],
                    [
                        'Default',
                        'Patient',
                    ],
                ],
                'maxMessage' => [
                    4 => 'Your NIC Number cannot be longer than {{ limit }} characters',
                ],
                'minMessage' => [
                    4 => 'Your NIC Number must be at least {{ limit }} characters long',
                ],
                'max' => [
                    4 => 12,
                ],
                'min' => [
                    4 => 10,
                ],
            ],
        ],
        $o[0],
        []
    );
},
8 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            (($f = &\Symfony\Component\VarExporter\Internal\Registry::$factories)['Symfony\\Component\\Validator\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::f('Symfony\\Component\\Validator\\Mapping\\ClassMetadata'))(),
            ($f['Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::f('Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'))(),
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['App\\Validator\\Constraints\\ContainsAlphanumeric'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('App\\Validator\\Constraints\\ContainsAlphanumeric')),
            clone ($p['Symfony\\Component\\Validator\\Constraints\\NotBlank'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Validator\\Constraints\\NotBlank')),
            clone ($p['Symfony\\Component\\Validator\\Constraints\\Length'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Validator\\Constraints\\Length')),
            $f['Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'](),
            clone ($p['App\\Validator\\Constraints\\ContainsNumberic'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('App\\Validator\\Constraints\\ContainsNumberic')),
            clone $p['Symfony\\Component\\Validator\\Constraints\\NotBlank'],
            $f['Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'](),
            clone ($p['App\\Validator\\Constraints\\ContainsAlphabetic'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('App\\Validator\\Constraints\\ContainsAlphabetic')),
            clone $p['Symfony\\Component\\Validator\\Constraints\\NotBlank'],
            $f['Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'](),
            clone $p['App\\Validator\\Constraints\\ContainsAlphabetic'],
            clone $p['Symfony\\Component\\Validator\\Constraints\\NotBlank'],
        ],
        null,
        [
            'stdClass' => [
                'name' => [
                    'App\\Entity\\Consultant',
                    'cNIC',
                    5 => 'cPhoneNumber',
                    8 => 'cFirstName',
                    11 => 'cLastName',
                ],
                'defaultGroup' => [
                    'Consultant',
                ],
                'members' => [
                    [
                        'cNIC' => [
                            $o[1],
                        ],
                        'cPhoneNumber' => [
                            $o[5],
                        ],
                        'cFirstName' => [
                            $o[8],
                        ],
                        'cLastName' => [
                            $o[11],
                        ],
                    ],
                ],
                'properties' => [
                    [
                        'cNIC' => $o[1],
                        'cPhoneNumber' => $o[5],
                        'cFirstName' => $o[8],
                        'cLastName' => $o[11],
                    ],
                ],
                'class' => [
                    1 => 'App\\Entity\\Consultant',
                    5 => 'App\\Entity\\Consultant',
                    8 => 'App\\Entity\\Consultant',
                    11 => 'App\\Entity\\Consultant',
                ],
                'property' => [
                    1 => 'cNIC',
                    5 => 'cPhoneNumber',
                    8 => 'cFirstName',
                    11 => 'cLastName',
                ],
                'constraints' => [
                    1 => [
                        $o[2],
                        $o[3],
                        $o[4],
                    ],
                    5 => [
                        $o[6],
                        $o[7],
                    ],
                    8 => [
                        $o[9],
                        $o[10],
                    ],
                    11 => [
                        $o[12],
                        $o[13],
                    ],
                ],
                'constraintsByGroup' => [
                    1 => [
                        'Default' => [
                            $o[2],
                            $o[3],
                            $o[4],
                        ],
                        'Consultant' => [
                            $o[2],
                            $o[3],
                            $o[4],
                        ],
                    ],
                    5 => [
                        'Default' => [
                            $o[6],
                            $o[7],
                        ],
                        'Consultant' => [
                            $o[6],
                            $o[7],
                        ],
                    ],
                    8 => [
                        'Default' => [
                            $o[9],
                            $o[10],
                        ],
                        'Consultant' => [
                            $o[9],
                            $o[10],
                        ],
                    ],
                    11 => [
                        'Default' => [
                            $o[12],
                            $o[13],
                        ],
                        'Consultant' => [
                            $o[12],
                            $o[13],
                        ],
                    ],
                ],
                'groups' => [
                    2 => [
                        'Default',
                        'Consultant',
                    ],
                    [
                        'Default',
                        'Consultant',
                    ],
                    [
                        'Default',
                        'Consultant',
                    ],
                    6 => [
                        'Default',
                        'Consultant',
                    ],
                    [
                        'Default',
                        'Consultant',
                    ],
                    9 => [
                        'Default',
                        'Consultant',
                    ],
                    [
                        'Default',
                        'Consultant',
                    ],
                    12 => [
                        'Default',
                        'Consultant',
                    ],
                    [
                        'Default',
                        'Consultant',
                    ],
                ],
                'maxMessage' => [
                    4 => 'Your NIC Number cannot be longer than {{ limit }} characters',
                ],
                'minMessage' => [
                    4 => 'Your NIC Number must be at least {{ limit }} characters long',
                ],
                'max' => [
                    4 => 12,
                ],
                'min' => [
                    4 => 10,
                ],
            ],
        ],
        $o[0],
        []
    );
},
9 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            (($f = &\Symfony\Component\VarExporter\Internal\Registry::$factories)['Symfony\\Component\\Validator\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::f('Symfony\\Component\\Validator\\Mapping\\ClassMetadata'))(),
            ($f['Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::f('Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'))(),
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['App\\Validator\\Constraints\\ContainsAlphanumeric'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('App\\Validator\\Constraints\\ContainsAlphanumeric')),
            clone ($p['Symfony\\Component\\Validator\\Constraints\\NotBlank'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Validator\\Constraints\\NotBlank')),
            clone ($p['Symfony\\Component\\Validator\\Constraints\\Length'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Validator\\Constraints\\Length')),
            $f['Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'](),
            clone ($p['App\\Validator\\Constraints\\ContainsNumberic'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('App\\Validator\\Constraints\\ContainsNumberic')),
            clone $p['Symfony\\Component\\Validator\\Constraints\\NotBlank'],
            $f['Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'](),
            clone ($p['App\\Validator\\Constraints\\ContainsAlphabetic'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('App\\Validator\\Constraints\\ContainsAlphabetic')),
            clone $p['Symfony\\Component\\Validator\\Constraints\\NotBlank'],
            $f['Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'](),
            clone $p['App\\Validator\\Constraints\\ContainsAlphabetic'],
            clone $p['Symfony\\Component\\Validator\\Constraints\\NotBlank'],
        ],
        null,
        [
            'stdClass' => [
                'name' => [
                    'App\\Entity\\Nurse',
                    'nNIC',
                    5 => 'nPhoneNumber',
                    8 => 'nFirstName',
                    11 => 'nLastName',
                ],
                'defaultGroup' => [
                    'Nurse',
                ],
                'members' => [
                    [
                        'nNIC' => [
                            $o[1],
                        ],
                        'nPhoneNumber' => [
                            $o[5],
                        ],
                        'nFirstName' => [
                            $o[8],
                        ],
                        'nLastName' => [
                            $o[11],
                        ],
                    ],
                ],
                'properties' => [
                    [
                        'nNIC' => $o[1],
                        'nPhoneNumber' => $o[5],
                        'nFirstName' => $o[8],
                        'nLastName' => $o[11],
                    ],
                ],
                'class' => [
                    1 => 'App\\Entity\\Nurse',
                    5 => 'App\\Entity\\Nurse',
                    8 => 'App\\Entity\\Nurse',
                    11 => 'App\\Entity\\Nurse',
                ],
                'property' => [
                    1 => 'nNIC',
                    5 => 'nPhoneNumber',
                    8 => 'nFirstName',
                    11 => 'nLastName',
                ],
                'constraints' => [
                    1 => [
                        $o[2],
                        $o[3],
                        $o[4],
                    ],
                    5 => [
                        $o[6],
                        $o[7],
                    ],
                    8 => [
                        $o[9],
                        $o[10],
                    ],
                    11 => [
                        $o[12],
                        $o[13],
                    ],
                ],
                'constraintsByGroup' => [
                    1 => [
                        'Default' => [
                            $o[2],
                            $o[3],
                            $o[4],
                        ],
                        'Nurse' => [
                            $o[2],
                            $o[3],
                            $o[4],
                        ],
                    ],
                    5 => [
                        'Default' => [
                            $o[6],
                            $o[7],
                        ],
                        'Nurse' => [
                            $o[6],
                            $o[7],
                        ],
                    ],
                    8 => [
                        'Default' => [
                            $o[9],
                            $o[10],
                        ],
                        'Nurse' => [
                            $o[9],
                            $o[10],
                        ],
                    ],
                    11 => [
                        'Default' => [
                            $o[12],
                            $o[13],
                        ],
                        'Nurse' => [
                            $o[12],
                            $o[13],
                        ],
                    ],
                ],
                'groups' => [
                    2 => [
                        'Default',
                        'Nurse',
                    ],
                    [
                        'Default',
                        'Nurse',
                    ],
                    [
                        'Default',
                        'Nurse',
                    ],
                    6 => [
                        'Default',
                        'Nurse',
                    ],
                    [
                        'Default',
                        'Nurse',
                    ],
                    9 => [
                        'Default',
                        'Nurse',
                    ],
                    [
                        'Default',
                        'Nurse',
                    ],
                    12 => [
                        'Default',
                        'Nurse',
                    ],
                    [
                        'Default',
                        'Nurse',
                    ],
                ],
                'maxMessage' => [
                    4 => 'Your NIC Number cannot be longer than {{ limit }} characters',
                ],
                'minMessage' => [
                    4 => 'Your NIC Number must be at least {{ limit }} characters long',
                ],
                'max' => [
                    4 => 12,
                ],
                'min' => [
                    4 => 10,
                ],
            ],
        ],
        $o[0],
        []
    );
},
10 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            (($f = &\Symfony\Component\VarExporter\Internal\Registry::$factories)['Symfony\\Component\\Validator\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::f('Symfony\\Component\\Validator\\Mapping\\ClassMetadata'))(),
            ($f['Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::f('Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'))(),
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['App\\Validator\\Constraints\\ContainsAlphanumeric'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('App\\Validator\\Constraints\\ContainsAlphanumeric')),
            clone ($p['Symfony\\Component\\Validator\\Constraints\\NotBlank'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Validator\\Constraints\\NotBlank')),
            clone ($p['Symfony\\Component\\Validator\\Constraints\\Length'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Validator\\Constraints\\Length')),
            $f['Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'](),
            clone ($p['App\\Validator\\Constraints\\ContainsNumberic'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('App\\Validator\\Constraints\\ContainsNumberic')),
            clone $p['Symfony\\Component\\Validator\\Constraints\\NotBlank'],
            $f['Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'](),
            clone ($p['App\\Validator\\Constraints\\ContainsAlphabetic'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('App\\Validator\\Constraints\\ContainsAlphabetic')),
            clone $p['Symfony\\Component\\Validator\\Constraints\\NotBlank'],
            $f['Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'](),
            clone $p['App\\Validator\\Constraints\\ContainsAlphabetic'],
            clone $p['Symfony\\Component\\Validator\\Constraints\\NotBlank'],
        ],
        null,
        [
            'stdClass' => [
                'name' => [
                    'App\\Entity\\Doctor',
                    'dNIC',
                    5 => 'dPhoneNumber',
                    8 => 'dFirstName',
                    11 => 'dLastName',
                ],
                'defaultGroup' => [
                    'Doctor',
                ],
                'members' => [
                    [
                        'dNIC' => [
                            $o[1],
                        ],
                        'dPhoneNumber' => [
                            $o[5],
                        ],
                        'dFirstName' => [
                            $o[8],
                        ],
                        'dLastName' => [
                            $o[11],
                        ],
                    ],
                ],
                'properties' => [
                    [
                        'dNIC' => $o[1],
                        'dPhoneNumber' => $o[5],
                        'dFirstName' => $o[8],
                        'dLastName' => $o[11],
                    ],
                ],
                'class' => [
                    1 => 'App\\Entity\\Doctor',
                    5 => 'App\\Entity\\Doctor',
                    8 => 'App\\Entity\\Doctor',
                    11 => 'App\\Entity\\Doctor',
                ],
                'property' => [
                    1 => 'dNIC',
                    5 => 'dPhoneNumber',
                    8 => 'dFirstName',
                    11 => 'dLastName',
                ],
                'constraints' => [
                    1 => [
                        $o[2],
                        $o[3],
                        $o[4],
                    ],
                    5 => [
                        $o[6],
                        $o[7],
                    ],
                    8 => [
                        $o[9],
                        $o[10],
                    ],
                    11 => [
                        $o[12],
                        $o[13],
                    ],
                ],
                'constraintsByGroup' => [
                    1 => [
                        'Default' => [
                            $o[2],
                            $o[3],
                            $o[4],
                        ],
                        'Doctor' => [
                            $o[2],
                            $o[3],
                            $o[4],
                        ],
                    ],
                    5 => [
                        'Default' => [
                            $o[6],
                            $o[7],
                        ],
                        'Doctor' => [
                            $o[6],
                            $o[7],
                        ],
                    ],
                    8 => [
                        'Default' => [
                            $o[9],
                            $o[10],
                        ],
                        'Doctor' => [
                            $o[9],
                            $o[10],
                        ],
                    ],
                    11 => [
                        'Default' => [
                            $o[12],
                            $o[13],
                        ],
                        'Doctor' => [
                            $o[12],
                            $o[13],
                        ],
                    ],
                ],
                'groups' => [
                    2 => [
                        'Default',
                        'Doctor',
                    ],
                    [
                        'Default',
                        'Doctor',
                    ],
                    [
                        'Default',
                        'Doctor',
                    ],
                    6 => [
                        'Default',
                        'Doctor',
                    ],
                    [
                        'Default',
                        'Doctor',
                    ],
                    9 => [
                        'Default',
                        'Doctor',
                    ],
                    [
                        'Default',
                        'Doctor',
                    ],
                    12 => [
                        'Default',
                        'Doctor',
                    ],
                    [
                        'Default',
                        'Doctor',
                    ],
                ],
                'maxMessage' => [
                    4 => 'Your NIC Number cannot be longer than {{ limit }} characters',
                ],
                'minMessage' => [
                    4 => 'Your NIC Number must be at least {{ limit }} characters long',
                ],
                'max' => [
                    4 => 12,
                ],
                'min' => [
                    4 => 10,
                ],
            ],
        ],
        $o[0],
        []
    );
},
11 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            (($f = &\Symfony\Component\VarExporter\Internal\Registry::$factories)['Symfony\\Component\\Validator\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::f('Symfony\\Component\\Validator\\Mapping\\ClassMetadata'))(),
            ($f['Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::f('Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'))(),
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['App\\Validator\\Constraints\\ContainsAlphanumeric'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('App\\Validator\\Constraints\\ContainsAlphanumeric')),
            clone ($p['Symfony\\Component\\Validator\\Constraints\\NotBlank'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Validator\\Constraints\\NotBlank')),
            clone ($p['Symfony\\Component\\Validator\\Constraints\\Length'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Validator\\Constraints\\Length')),
            $f['Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'](),
            clone ($p['App\\Validator\\Constraints\\ContainsNumberic'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('App\\Validator\\Constraints\\ContainsNumberic')),
            clone $p['Symfony\\Component\\Validator\\Constraints\\NotBlank'],
            $f['Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'](),
            clone ($p['App\\Validator\\Constraints\\ContainsAlphabetic'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('App\\Validator\\Constraints\\ContainsAlphabetic')),
            clone $p['Symfony\\Component\\Validator\\Constraints\\NotBlank'],
            $f['Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'](),
            clone $p['App\\Validator\\Constraints\\ContainsAlphabetic'],
            clone $p['Symfony\\Component\\Validator\\Constraints\\NotBlank'],
        ],
        null,
        [
            'stdClass' => [
                'name' => [
                    'App\\Entity\\Technician',
                    'tNIC',
                    5 => 'tPhoneNumber',
                    8 => 'tFirstName',
                    11 => 'tLastName',
                ],
                'defaultGroup' => [
                    'Technician',
                ],
                'members' => [
                    [
                        'tNIC' => [
                            $o[1],
                        ],
                        'tPhoneNumber' => [
                            $o[5],
                        ],
                        'tFirstName' => [
                            $o[8],
                        ],
                        'tLastName' => [
                            $o[11],
                        ],
                    ],
                ],
                'properties' => [
                    [
                        'tNIC' => $o[1],
                        'tPhoneNumber' => $o[5],
                        'tFirstName' => $o[8],
                        'tLastName' => $o[11],
                    ],
                ],
                'class' => [
                    1 => 'App\\Entity\\Technician',
                    5 => 'App\\Entity\\Technician',
                    8 => 'App\\Entity\\Technician',
                    11 => 'App\\Entity\\Technician',
                ],
                'property' => [
                    1 => 'tNIC',
                    5 => 'tPhoneNumber',
                    8 => 'tFirstName',
                    11 => 'tLastName',
                ],
                'constraints' => [
                    1 => [
                        $o[2],
                        $o[3],
                        $o[4],
                    ],
                    5 => [
                        $o[6],
                        $o[7],
                    ],
                    8 => [
                        $o[9],
                        $o[10],
                    ],
                    11 => [
                        $o[12],
                        $o[13],
                    ],
                ],
                'constraintsByGroup' => [
                    1 => [
                        'Default' => [
                            $o[2],
                            $o[3],
                            $o[4],
                        ],
                        'Technician' => [
                            $o[2],
                            $o[3],
                            $o[4],
                        ],
                    ],
                    5 => [
                        'Default' => [
                            $o[6],
                            $o[7],
                        ],
                        'Technician' => [
                            $o[6],
                            $o[7],
                        ],
                    ],
                    8 => [
                        'Default' => [
                            $o[9],
                            $o[10],
                        ],
                        'Technician' => [
                            $o[9],
                            $o[10],
                        ],
                    ],
                    11 => [
                        'Default' => [
                            $o[12],
                            $o[13],
                        ],
                        'Technician' => [
                            $o[12],
                            $o[13],
                        ],
                    ],
                ],
                'groups' => [
                    2 => [
                        'Default',
                        'Technician',
                    ],
                    [
                        'Default',
                        'Technician',
                    ],
                    [
                        'Default',
                        'Technician',
                    ],
                    6 => [
                        'Default',
                        'Technician',
                    ],
                    [
                        'Default',
                        'Technician',
                    ],
                    9 => [
                        'Default',
                        'Technician',
                    ],
                    [
                        'Default',
                        'Technician',
                    ],
                    12 => [
                        'Default',
                        'Technician',
                    ],
                    [
                        'Default',
                        'Technician',
                    ],
                ],
                'maxMessage' => [
                    4 => 'Your NIC Number cannot be longer than {{ limit }} characters',
                ],
                'minMessage' => [
                    4 => 'Your NIC Number must be at least {{ limit }} characters long',
                ],
                'max' => [
                    4 => 12,
                ],
                'min' => [
                    4 => 10,
                ],
            ],
        ],
        $o[0],
        []
    );
},

]];
